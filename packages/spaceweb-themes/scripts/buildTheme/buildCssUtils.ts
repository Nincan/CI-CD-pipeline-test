import _ from 'lodash';
import postcss, { Rule, Declaration } from 'postcss';
import path from 'path';
import CleanCSS from 'clean-css';
import bytes from 'bytes';

import { getCssContentFromConfig } from './utils/getCssContentFromConfig';
import { HYPERSPACE_THEME, COMMON_THEME, UTILITIES_FILE_PATH } from '../../config/filePaths';
import { exists, getAbsPath, getRootDir, load, prettifyCSS, stop, writeFile } from './utils/files';
import { ThemeConfig } from './types';
import * as colors from '../../../../utils/colors';
import { execSync } from 'child_process';
import { convertTokensToTheme } from './utils/convertTokensToTheme';
import { getRequiredPluginsFromTheme } from './tailwindPlugins/getCorePlugins';
import emoji from '../../../../utils/emoji';
import fileUtils from '../../../../utils/fileUtils';

const GROUP_UTILS_PROPERTIES_THEME = ['opacity', 'backgroundColor', 'color', '__tokens'];
const GROUP_UTILS_PROPERTIES_COMMON = ['display'];
const CSS_UTILS_FILE_PATH = path.join(getRootDir(), UTILITIES_FILE_PATH, 'utilities.css');
const MIN_CSS_UTILS_FILE_PATH = path.join(getRootDir(), UTILITIES_FILE_PATH, 'utilities.min.css');

/**
 * 1. Merge common & hyperspace-light themeConfig
 * 2. add `group-hover` variants for `GROUP_UTILS_PROPERTIES`
 * 3. Run Tailwind
 * 4. Create utilities.css with `group:hover` selectors
 */
export async function buildCssUtils() {
  fileUtils.log('\n\n');
  fileUtils.log(colors.info(emoji.hourglass, 'Building CSS Utilities'));
  const { output } = HYPERSPACE_THEME;
  if (!exists(getAbsPath(COMMON_THEME.input))) {
    stop(colors.error(colors.file(output), 'does not exist.'));
  }
  const commonThemeConfig: ThemeConfig = load(getAbsPath(COMMON_THEME.input)),
    hyperspaceThemeConfig: ThemeConfig = load(getAbsPath(path.join(HYPERSPACE_THEME.input, 'light'))),
    { theme, ...rest } = _.merge({}, commonThemeConfig, hyperspaceThemeConfig),
    unresolvedTheme = convertTokensToTheme(theme, true),
    filteredTheme = {
      ..._.pick(unresolvedTheme, GROUP_UTILS_PROPERTIES_THEME),
      ...GROUP_UTILS_PROPERTIES_COMMON.reduce((obj, key) => {
        obj[key] = {};
        return obj;
      }, {}),
      __tokens: _.pick(unresolvedTheme.__tokens, 'spr'),
    };

  const cssContent = await getCssContentFromConfig(
    {
      theme: filteredTheme,
      ...rest,
      variants: Object.keys(filteredTheme).reduce((acc, key) => ({ ...acc, [key]: ['group-hover'] }), {}),
    },
    getRequiredPluginsFromTheme(filteredTheme)
  );

  const root = postcss.parse(cssContent || '', { from: undefined });
  let rulesToRemove: Rule[] = [];
  root.each(node => {
    if (
      node.type === 'rule' &&
      (!node.selector.includes('group:hover') ||
        ![...GROUP_UTILS_PROPERTIES_THEME, ...GROUP_UTILS_PROPERTIES_COMMON].some(
          x => _.camelCase(x) === _.camelCase((node.nodes?.[0] as Declaration)?.prop)
        ))
    ) {
      rulesToRemove.push(node);
    }
  });
  rulesToRemove.forEach(rule => root.removeChild(rule));

  const fileContent = `
  /**
  * SPACEWEB-GENERATED-CSS-FILE
  * DO NOT EDIT THIS FILE DIRECTLY, CHECK spaceweb-themes/scripts/buildTheme/buildCssUtils
  */
  
  ${root.toString()}
  `;
  const minifiedFileContent = new CleanCSS().minify(fileContent).styles;

  writeFile(CSS_UTILS_FILE_PATH, await prettifyCSS(fileContent));
  writeFile(MIN_CSS_UTILS_FILE_PATH, minifiedFileContent);

  execSync(`git add ${CSS_UTILS_FILE_PATH} ${MIN_CSS_UTILS_FILE_PATH}`);
  fileUtils.log(colors.file(emoji.disk, `CSS Utilities built and saved successfully to ${CSS_UTILS_FILE_PATH}`));
  fileUtils.log(colors.info(emoji.yes, `Minified CSS Utilities size ${bytes(minifiedFileContent.length)}\n\n`));
}
