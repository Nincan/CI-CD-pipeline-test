/**
 * @author Ivan Torres
 */

import '@testing-library/jest-dom/extend-expect';
import { cleanup, render } from '@testing-library/react';

import { TestProvider, getBreakpoints, getCSSByTestId, setupBreakpoints } from '../../test-utils/test-provider';
import Grid from '../Grid';

import Col from '../Col';

describe('Col', () => {
  beforeAll(setupBreakpoints);

  afterEach(cleanup);

  describe('with `className` property', () => {
    test('sets `className` generated by `css`', () => {
      render(
        <TestProvider>
          <Grid>
            <Col data-testid="col" className="spr-text-05 p-4">
              1
            </Col>
          </Grid>
        </TestProvider>
      );

      const css = getCSSByTestId('col');

      expect(css.padding).toEqual('1.6rem 1.6rem 1.6rem 1.6rem');
      expect(css.color).toEqual('rgb(255, 255, 255)');
    });
  });

  // TODO: Add test for `style` property
  // TODO: Add the above test to Grid component

  describe('width `colSpan` property', () => {
    test('sets `col-span-n` rules', () => {
      render(
        <TestProvider>
          <Grid cols={3}>
            <Col>1</Col>
            <Col data-testid="span-2" colSpan={2}>
              2
            </Col>
            <Col data-testid="span-3" colSpan={3}>
              3
            </Col>
          </Grid>
        </TestProvider>
      );

      const css2 = getCSSByTestId('span-2');
      const css3 = getCSSByTestId('span-3');

      expect(css2.gridColumn).toEqual('span 2 / span 2');
      expect(css3.gridColumn).toEqual('span 3 / span 3');
    });
  });

  describe('width `colStart` property', () => {
    test('sets `col-start-n` rules', () => {
      render(
        <TestProvider>
          <Grid cols={3}>
            <Col data-testid="start-3" colStart={3}>
              1
            </Col>
            <Col data-testid="start-2" colStart={2}>
              2
            </Col>
          </Grid>
        </TestProvider>
      );

      const css2 = getCSSByTestId('start-2');
      const css3 = getCSSByTestId('start-3');

      expect(css2.gridColumnStart).toEqual('2');
      expect(css3.gridColumnStart).toEqual('3');
    });
  });

  describe('width `colEnd` property', () => {
    test('sets `col-end-n` rules', () => {
      render(
        <TestProvider>
          <Grid cols={3}>
            <Col data-testid="end-2" colEnd={3}>
              1
            </Col>
            <Col data-testid="end-3" colEnd={4}>
              2
            </Col>
          </Grid>
        </TestProvider>
      );

      const css2 = getCSSByTestId('end-2');
      const css3 = getCSSByTestId('end-3');

      expect(css2.gridColumnEnd).toEqual('3');
      expect(css3.gridColumnEnd).toEqual('4');
    });
  });

  describe('width `rowSpan` property', () => {
    test('sets `row-span-n` rules', () => {
      render(
        <TestProvider>
          <Grid cols={3}>
            <Col>1</Col>
            <Col data-testid="span-2" rowSpan={2}>
              2
            </Col>
            <Col data-testid="span-3" rowSpan={3}>
              3
            </Col>
          </Grid>
        </TestProvider>
      );

      const css2 = getCSSByTestId('span-2');
      const css3 = getCSSByTestId('span-3');

      expect(css2.gridRow).toEqual('span 2 / span 2');
      expect(css3.gridRow).toEqual('span 3 / span 3');
    });
  });

  describe('width `rowStart` property', () => {
    test('sets `row-start-n` rules', () => {
      render(
        <TestProvider>
          <Grid cols={3}>
            <Col data-testid="start-3" rowStart={3}>
              1
            </Col>
            <Col data-testid="start-2" rowStart={2}>
              2
            </Col>
          </Grid>
        </TestProvider>
      );

      const css2 = getCSSByTestId('start-2');
      const css3 = getCSSByTestId('start-3');

      expect(css2.gridRowStart).toEqual('2');
      expect(css3.gridRowStart).toEqual('3');
    });
  });

  describe('width `rowEnd` property', () => {
    test('sets `row-end-n` rules', () => {
      render(
        <TestProvider>
          <Grid cols={3}>
            <Col data-testid="end-2" rowEnd={3}>
              1
            </Col>
            <Col data-testid="end-3" rowEnd={4}>
              2
            </Col>
          </Grid>
        </TestProvider>
      );

      const css2 = getCSSByTestId('end-2');
      const css3 = getCSSByTestId('end-3');

      expect(css2.gridRowEnd).toEqual('3');
      expect(css3.gridRowEnd).toEqual('4');
    });
  });

  describe.each(getBreakpoints())('for breakpoint %s', (breakpoint, maxWidth) => {
    beforeAll(() => window.resizeTo(Number.parseInt(maxWidth, 10), 1280));

    describe('width `colSpan` property', () => {
      test('sets `col-span-n` rules', () => {
        render(
          <TestProvider>
            <Grid cols={3}>
              <Col>1</Col>
              <Col data-testid="span-2" {...{ [breakpoint]: { colSpan: 2 } }}>
                2
              </Col>
              <Col data-testid="span-3" {...{ [breakpoint]: { colSpan: 3 } }}>
                3
              </Col>
            </Grid>
          </TestProvider>
        );

        const css2 = getCSSByTestId('span-2');
        const css3 = getCSSByTestId('span-3');

        expect(css2.gridColumn).toEqual('span 2 / span 2');
        expect(css3.gridColumn).toEqual('span 3 / span 3');
      });
    });

    describe('width `colStart` property', () => {
      test('sets `col-start-n` rules', () => {
        render(
          <TestProvider>
            <Grid cols={3}>
              <Col data-testid="start-3" {...{ [breakpoint]: { colStart: 3 } }}>
                1
              </Col>
              <Col data-testid="start-2" {...{ [breakpoint]: { colStart: 2 } }}>
                2
              </Col>
            </Grid>
          </TestProvider>
        );

        const css2 = getCSSByTestId('start-2');
        const css3 = getCSSByTestId('start-3');

        expect(css2.gridColumnStart).toEqual('2');
        expect(css3.gridColumnStart).toEqual('3');
      });
    });

    describe('width `colEnd` property', () => {
      test('sets `col-end-n` rules', () => {
        render(
          <TestProvider>
            <Grid cols={3}>
              <Col data-testid="end-2" {...{ [breakpoint]: { colEnd: 3 } }}>
                2
              </Col>
              <Col data-testid="end-3" {...{ [breakpoint]: { colEnd: 4 } }}>
                1
              </Col>
            </Grid>
          </TestProvider>
        );

        const css2 = getCSSByTestId('end-2');
        const css3 = getCSSByTestId('end-3');

        expect(css2.gridColumnEnd).toEqual('3');
        expect(css3.gridColumnEnd).toEqual('4');
      });
    });

    describe('width `rowSpan` property', () => {
      test('sets `row-span-n` rules', () => {
        render(
          <TestProvider>
            <Grid cols={3}>
              <Col>1</Col>
              <Col data-testid="span-2" {...{ [breakpoint]: { rowSpan: 2 } }}>
                2
              </Col>
              <Col data-testid="span-3" {...{ [breakpoint]: { rowSpan: 3 } }}>
                3
              </Col>
            </Grid>
          </TestProvider>
        );

        const css2 = getCSSByTestId('span-2');
        const css3 = getCSSByTestId('span-3');

        expect(css2.gridRow).toEqual('span 2 / span 2');
        expect(css3.gridRow).toEqual('span 3 / span 3');
      });
    });

    describe('width `rowStart` property', () => {
      test('sets `row-start-n` rules', () => {
        render(
          <TestProvider>
            <Grid cols={3}>
              <Col data-testid="start-3" {...{ [breakpoint]: { rowStart: 3 } }}>
                1
              </Col>
              <Col data-testid="start-2" {...{ [breakpoint]: { rowStart: 2 } }}>
                2
              </Col>
            </Grid>
          </TestProvider>
        );

        const css2 = getCSSByTestId('start-2');
        const css3 = getCSSByTestId('start-3');

        expect(css2.gridRowStart).toEqual('2');
        expect(css3.gridRowStart).toEqual('3');
      });
    });

    describe('width `rowEnd` property', () => {
      test('sets `row-end-n` rules', () => {
        render(
          <TestProvider>
            <Grid cols={3}>
              <Col data-testid="end-2" {...{ [breakpoint]: { rowEnd: 3 } }}>
                2
              </Col>
              <Col data-testid="end-3" {...{ [breakpoint]: { rowEnd: 4 } }}>
                1
              </Col>
            </Grid>
          </TestProvider>
        );

        const css2 = getCSSByTestId('end-2');
        const css3 = getCSSByTestId('end-3');

        expect(css2.gridRowEnd).toEqual('3');
        expect(css3.gridRowEnd).toEqual('4');
      });
    });
  });
});
